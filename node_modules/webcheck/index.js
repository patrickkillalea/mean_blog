"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async = require('async');
var request = require('request');
var events_1 = require('events');
var pkg = require('./package.json');
var Webcheck = (function (_super) {
    __extends(Webcheck, _super);
    function Webcheck(opts) {
        var _this = this;
        _super.call(this);
        this.middlewares = [];
        opts = opts || {};
        this.request = opts.request || Webcheck.request;
        this.headers = opts.headers || Webcheck.headers;
        opts.concurrency = opts.concurrency || Webcheck.concurrency;
        var taskRunner = function (task, callback) {
            var req;
            if (task.preventCrawl) {
                return callback();
            }
            _this.emit('request', task);
            if (task.preventCrawl) {
                return callback();
            }
            req = _this.request(task)
                .on('response', function (response) {
                var result, done;
                _this.emit('response', response);
                result = {
                    url: task.url,
                    settings: task,
                    request: req,
                    response: response,
                    done: function (err) {
                        if (!done) {
                            done = true;
                            return callback(err);
                        }
                        console.warn('done already triggered');
                    }
                };
                async.applyEachSeries(_this.middlewares, result, function (err) {
                    if (err) {
                        return callback(err);
                    }
                    delete result.done;
                    _this.emit('result', result);
                    if (!done) {
                        return callback();
                    }
                });
            })
                .on('error', function (err) {
                return callback(err);
            });
        };
        this.queue = async.queue(taskRunner, opts.concurrency);
        this.queue.drain = function () {
            _this.emit('drain');
        };
    }
    Webcheck.prototype.crawl = function (opts, cb) {
        var _this = this;
        if (cb === void 0) { cb = function () { }; }
        var caller;
        opts = opts || {};
        if (typeof opts.url !== 'string') {
            throw new Error('No url specified!');
        }
        opts.headers = opts.headers || this.headers;
        opts.preventCrawl = false;
        this.emit('crawl', opts);
        caller = function () {
            _this.emit('queue', opts);
            if (opts.preventCrawl) {
                return cb();
            }
            if (opts.immediately) {
                return _this.queue.unshift(opts, cb);
            }
            _this.queue.push(opts, cb);
        };
        if (typeof opts.wait === 'number') {
            this.emit('wait', opts);
            setTimeout(caller, opts.wait);
        }
        else {
            caller();
        }
        return this;
    };
    Webcheck.prototype.addPlugin = function (plugin) {
        this.emit('addPlugin', plugin);
        plugin.register(this);
        return this;
    };
    Webcheck.concurrency = 5;
    Webcheck.headers = {
        'User-Agent': pkg.name + ' ' + pkg.version
    };
    Webcheck.request = request;
    return Webcheck;
}(events_1.EventEmitter));
exports.Webcheck = Webcheck;
var Plugin = (function () {
    function Plugin() {
        this.on = {};
        this.once = {};
    }
    Plugin.prototype.enable = function () {
        var hash;
        this.handle.emit('enablePlugin', this);
        for (hash in this.on) {
            if (this.on.hasOwnProperty(hash)) {
                this.handle.on(hash, this.on[hash]);
            }
        }
        for (hash in this.once) {
            if (this.once.hasOwnProperty(hash)) {
                this.handle.once(hash, this.once[hash]);
            }
        }
        if (this.middleware) {
            this.handle.middlewares.push(this.middleware);
        }
        if (typeof this.init === 'function') {
            this.init.apply(this, arguments);
        }
        return this;
    };
    Plugin.prototype.disable = function () {
        var hash;
        this.handle.emit('disablePlugin', this);
        for (hash in this.on) {
            if (this.on.hasOwnProperty(hash)) {
                this.handle.removeListener(hash, this.on[hash]);
            }
        }
        for (hash in this.once) {
            if (this.once.hasOwnProperty(hash)) {
                this.handle.removeListener(hash, this.once[hash]);
            }
        }
        if (this.middleware) {
            this.handle.middlewares.splice(this.handle.middlewares.indexOf(this.middleware), 1);
        }
        return this;
    };
    Plugin.prototype.register = function (handle) {
        this.handle = handle;
        this.handle.emit('registerPlugin', this);
        return this;
    };
    return Plugin;
}());
exports.Plugin = Plugin;
//# sourceMappingURL=index.js.map
// Fallback to version 1.0.0

module.exports = exports.Webcheck;
module.exports.Webcheck = exports.Webcheck;
module.exports.Plugin = exports.Plugin;
