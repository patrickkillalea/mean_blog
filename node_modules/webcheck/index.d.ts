// [ts-npm-lint] disabled triple slash reference to 'typings/main.d.ts'
import * as http from 'http';
import * as request from 'request';
import { EventEmitter } from 'events';
export interface ICallback {
    (err?: Error): void;
}
export interface IMiddleware {
    (result: IResult, next: ICallback): void;
}
export interface IHeaders {
    [name: string]: string;
}
export interface IEmitterDictionary {
    response?: (response) => void;
    [event: string]: (...args) => void;
}
export interface IPlugin {
    handle: Webcheck;
    on: IEmitterDictionary;
    once: IEmitterDictionary;
    middleware?: IMiddleware;
    init?: Function;
    enable(): IPlugin;
    disable(): IPlugin;
    register(handle: IWebcheck): IPlugin;
}
export interface IWebcheckOptions {
    request?: request.RequestAPI<request.Request, request.CoreOptions, request.RequiredUriUrl>;
    headers?: IHeaders;
    concurrency?: number;
}
export interface ICrawlOptions {
    url: string;
    headers?: IHeaders;
    preventCrawl?: boolean;
    immediately?: boolean;
    wait?: number;
}
export interface IResult {
    url: string;
    settings: ICrawlOptions;
    request: request.Request;
    response: http.ClientResponse;
    done?: ICallback;
}
export interface IWebcheck {
    middlewares: IMiddleware[];
    queue: AsyncQueue<any>;
    request: request.RequestAPI<request.Request, request.CoreOptions, request.RequiredUriUrl>;
    headers: IHeaders;
    addPlugin(plugin: Plugin): IWebcheck;
    crawl(options: ICrawlOptions, callback: ICallback): IWebcheck;
}
export declare class Webcheck extends EventEmitter implements IWebcheck {
    static concurrency: number;
    static headers: IHeaders;
    static request: request.RequestAPI<request.Request, request.CoreOptions, request.RequiredUriUrl>;
    middlewares: IMiddleware[];
    queue: AsyncQueue<ICrawlOptions>;
    request: request.RequestAPI<request.Request, request.CoreOptions, request.RequiredUriUrl>;
    headers: IHeaders;
    constructor(opts: IWebcheckOptions);
    crawl(opts: ICrawlOptions, cb?: ICallback): this;
    addPlugin(plugin: Plugin): Webcheck;
}
export declare class Plugin implements IPlugin {
    handle: Webcheck;
    on: IEmitterDictionary;
    once: IEmitterDictionary;
    middleware: IMiddleware;
    init: Function;
    enable(): Plugin;
    disable(): Plugin;
    register(handle: Webcheck): Plugin;
}
